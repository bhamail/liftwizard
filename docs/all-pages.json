[{"type":"Page","content":[{"title":"Liftwizard","id":"liftwizard","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Liftwizard is a collection of bundles and add-ons for ","type":"SimpleText"},{"url":"https://www.dropwizard.io/","isFile":false,"type":"Link","content":[{"text":"Dropwizard","type":"SimpleText"}]},{"text":", the Java framework for writing web services.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"There are very few dependencies between the bundles, so you can pick and choose the ones you want.","type":"SimpleText"}]},{"level":2,"title":"Module groups","id":"module-groups","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The bundles can be loosely grouped into categories.","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Dropwizard configuration","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"JSON serialization/deserialization","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Servlet client/server logging","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"url":"https://github.com/goldmansachs/reladomo","isFile":false,"type":"Link","content":[{"text":"Reladomo","type":"SimpleText"}]},{"text":" ORM integration for Dropwizard","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Other Dropwizard utility","type":"SimpleText"}]}]}]},{"level":2,"title":"Guide structure","id":"guide-structure","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"In this guide, we'll start with the application ","type":"SimpleText"},{"url":"https://github.com/dropwizard/dropwizard/tree/master/dropwizard-example","isFile":false,"type":"Link","content":[{"code":"dropwizard-example","type":"InlinedCode"}]},{"text":" which is a maven module that's part of the main Dropwizard repository. We'll gradually turn it into ","type":"SimpleText"},{"url":"https://github.com/motlin/liftwizard/tree/master/liftwizard-example","isFile":false,"type":"Link","content":[{"code":"liftwizard-example","type":"InlinedCode"}]},{"text":", an application with an identical service api that uses as many Liftwizard features as possible.","type":"SimpleText"}]}]}],"lastModifiedTime":1600108188504,"tocItem":{"sectionTitle":"","pageTitle":"Liftwizard","pageMeta":{},"dirName":"","fileName":"index","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Liftwizard","id":"liftwizard"}]}},{"type":"Page","content":[{"title":"EnvironmentConfigBundle","id":"environmentconfigbundle","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"EnvironmentConfigBundle","type":"InlinedCode"},{"text":" supports environment variable substitution inside Dropwizard configuration files.","type":"SimpleText"}]},{"level":2,"title":"Environment variable substitution in example applications","id":"environment-variable-substitution-in-example-applications","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"In the example applications, environment variable substitution is used for ","type":"SimpleText"},{"code":"defaultName","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"yaml","snippet":"template: Hello, %s!\ndefaultName: ${DW_DEFAULT_NAME:-Stranger}\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"We can see this in action by running the ","type":"SimpleText"},{"code":"render","type":"InlinedCode"},{"text":" command, with and without the environment variable set.","type":"SimpleText"}]},{"lang":"bash","snippet":"$ java -jar target/liftwizard-example-0.1.0.jar render example.yml --include-default\nINFO  [2020-05-02 03:07:41,910] com.example.helloworld.cli.RenderCommand: DEFAULT => Hello, Stranger!\n$ DW_DEFAULT_NAME=EnvSubstitution java -jar target/liftwizard-example-0.1.0.jar render example.yml --include-default\nINFO  [2020-05-02 03:08:05,685] com.example.helloworld.cli.RenderCommand: DEFAULT => Hello, EnvSubstitution!\n","lineNumber":"","type":"Snippet"},{"level":2,"title":"Environment variable substitution in dropwizard-example","id":"environment-variable-substitution-in-dropwizard-example","type":"SubHeading"},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n    // Enable variable substitution with environment variables\n    bootstrap.setConfigurationSourceProvider(\n            new SubstitutingSourceProvider(\n                    bootstrap.getConfigurationSourceProvider(),\n                    new EnvironmentVariableSubstitutor(false)\n            )\n    );\n \n    // ...\n}\n","lineNumber":"","type":"Snippet"},{"level":2,"title":"Environment variable substitution in liftwizard-example","id":"environment-variable-substitution-in-liftwizard-example","type":"SubHeading"},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n    bootstrap.addBundle(new EnvironmentConfigBundle());\n    // ...\n}\n","lineNumber":"","type":"Snippet"}]}],"lastModifiedTime":1600108188504,"tocItem":{"sectionTitle":"Configuration","pageTitle":"Environment Variables","pageMeta":{},"dirName":"configuration","fileName":"environment-variables","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"EnvironmentConfigBundle","id":"environmentconfigbundle"}]}},{"type":"Page","content":[{"title":"Configuration through json5 instead of yaml","id":"configuration-through-json5-instead-of-yaml","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Dropwizard's configuration is specified in yaml by default. While yaml has nice properties, you may prefer json or some other format.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Dropwizard's ","type":"SimpleText"},{"url":"https://www.dropwizard.io/en/latest/manual/core.html#configuration","isFile":false,"type":"Link","content":[{"text":"documentation","type":"SimpleText"}]},{"text":" claims:","type":"SimpleText"}]},{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"If your configuration file doesn't end in .yml or .yaml, Dropwizard tries to parse it as a JSON file.","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"This is easily disproved by renaming example.yml to example.json and trying to run the application. It will incorrectly start without error.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Since json syntax is a subset of yml syntax, you can go ahead and convert your configuration file to json without changing the file extension from yaml or yml. However, this approach doesn't prevent you from accidentally using yaml syntax.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"You can change your application to use json for its configuration using ","type":"SimpleText"},{"code":"JsonConfigurationFactoryFactory","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n    bootstrap.setConfigurationFactoryFactory(new JsonConfigurationFactoryFactory<>());\n    // ...\n}\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"code":"JsonConfigurationFactoryFactory","type":"InlinedCode"},{"text":" uses json5 syntax by default, using optional features in Jackson. So you'll still be able to include comments inside your configuration files.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"You'll have to convert production configuration files. So ","type":"SimpleText"},{"code":"example.yml","type":"InlinedCode"},{"text":" becomes ","type":"SimpleText"},{"code":"example.json5","type":"InlinedCode"},{"text":". You'll also have to convert configuration files used by ","type":"SimpleText"},{"code":"DropwizardAppRule","type":"InlinedCode"},{"text":" in tests. So ","type":"SimpleText"},{"code":"src/test/resources/test-example.yml","type":"InlinedCode"},{"text":" becomes ","type":"SimpleText"},{"code":"src/test/resources/test-example.json5","type":"InlinedCode"}]}]}],"lastModifiedTime":1600108188504,"tocItem":{"sectionTitle":"Configuration","pageTitle":"Json5 Configuration","pageMeta":{},"dirName":"configuration","fileName":"json5-configuration","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Configuration through json5 instead of yaml","id":"configuration-through-json5-instead-of-yaml"}]}},{"type":"Page","content":[{"title":"ConfigLoggingBundle","id":"configloggingbundle","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"ConfigLoggingBundle","type":"InlinedCode"},{"text":" logs the Dropwizard configuration to slf4j at INFO level, by serializing the in-memory configuration object to json. It does not echo the contents of the configuration file back. The output will contain default values that were not specified in the original configuration file. Some other values will be normalized or pretty printed.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To turn it on, add ","type":"SimpleText"},{"code":"ConfigLoggingBundle","type":"InlinedCode"},{"text":" to the list of registered bundles.","type":"SimpleText"}]},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n    bootstrap.setConfigurationFactoryFactory(new JsonConfigurationFactoryFactory<>());\n    bootstrap.addBundle(new EnvironmentConfigBundle());\n\n    bootstrap.addBundle(new ObjectMapperBundle());\n    bootstrap.addBundle(new ConfigLoggingBundle());\n\n    bootstrap.addBundle(new JerseyHttpLoggingBundle());\n\n    bootstrap.addBundle(new ClockBundle());\n    bootstrap.addBundle(new UUIDBundle());\n\n    bootstrap.addBundle(new H2Bundle());\n    bootstrap.addBundle(new NamedDataSourceBundle());\n    bootstrap.addBundle(new ConnectionManagerBundle());\n    bootstrap.addBundle(new ConnectionManagerHolderBundle());\n    bootstrap.addBundle(new ReladomoBundle());\n\n    bootstrap.addCommand(new RenderCommand());\n    bootstrap.addBundle(new AssetsBundle());\n    bootstrap.addBundle(new MigrationsBundle<HelloWorldConfiguration>() {\n        @Override\n        public DataSourceFactory getDataSourceFactory(HelloWorldConfiguration configuration) {\n            return Iterate.getOnly(configuration.getNamedDataSourceFactories());\n        }\n    });\n    bootstrap.addBundle(new ViewBundle<HelloWorldConfiguration>() {\n        @Override\n        public Map<String, Map<String, String>> getViewConfiguration(HelloWorldConfiguration configuration) {\n            return configuration.getViewRendererConfiguration();\n        }\n    });\n}","entry":"initialize","readMore":true,"readMoreLines":8,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Now ","type":"SimpleText"},{"code":"HelloWorldApplication","type":"InlinedCode"},{"text":" will log something like this on startup:","type":"SimpleText"}]},{"lang":"","snippet":"INFO  12:53:29 [main]  {liftwizard.priority=-8, liftwizard.bundle=ConfigLoggingBundle} io.liftwizard.dropwizard.bundle.config.logging.ConfigLoggingBundle: Inferred Dropwizard configuration:\n\n","lineNumber":"","type":"Snippet"},{"lang":"json5","snippet":"{\n  \"template\": \"Hello, %s!\",\n  \"defaultName\": \"Stranger\",\n  \"configLoggingFactory\": {\n    \"enabled\": true\n  },\n  // ...\n  \"metrics\": {\n    \"frequency\": \"1 minute\",\n    \"reporters\": [ ]\n  }\n}\n","lineNumber":"","title":"Output configuration","type":"Snippet"},{"title":"Original configuration","collapsedPaths":["root.database","root.server","root.logging"],"data":{"template":"Hello, %s!","defaultName":"Stranger","clock":{"type":"incrementing"},"uuid":{"type":"seed","seed":"example seed"},"server":{"detailedJsonProcessingExceptionMapper":true,"applicationConnectors":[{"type":"http","port":0}],"adminConnectors":[{"type":"http","port":0}]},"logging":{"level":"INFO","appenders":[{"type":"buffered","timeZone":"system","logFormat":"%highlight(%-5level) %cyan(%date{HH:mm:ss}) [%white(%thread)] %blue(%marker) {%magenta(%mdc)} %green(%logger): %message%n%red(%rootException)","includeCallerData":true},{"type":"file","currentLogFilename":"./logs/application.log","archivedLogFilenamePattern":"./logs/application-%d-%i.log.gz","archive":true,"archivedFileCount":7,"maxFileSize":"1mb"},{"type":"logstash-file","currentLogFilename":"./logs/logstash.json","archivedLogFilenamePattern":"./logs/logstash-%d.json","includeCallerData":true}]},"configLogging":{"enabled":true},"h2":{"enabled":true,"webPort":8083,"tcpPort":9093},"dataSources":[{"name":"liquibase","driverClass":"com.p6spy.engine.spy.P6SpyDriver","readOnlyByDefault":false,"user":"sa","password":"","url":"jdbc:p6spy:h2:tcp://localhost:9093/liftwizard-app-h2","properties":{"charSet":"UTF-8"},"logValidationErrors":true,"maxWaitForConnection":"1 second"}],"connectionManagers":[{"connectionManagerName":"liquibase","dataSourceName":"liquibase","databaseType":"H2","schemaName":"liftwizard-app-h2"}],"reladomo":{"runtimeConfigurationPaths":["reladomo-runtime-configuration/ReladomoRuntimeConfiguration.xml"]}},"paths":[],"type":"Json"},{"type":"Paragraph","content":[{"text":"Note that the ","type":"SimpleText"},{"code":"metrics","type":"InlinedCode"},{"text":" section at the end was not specified in ","type":"SimpleText"},{"code":"test-example.json5","type":"InlinedCode"},{"text":". It comes from serializing the output of ","type":"SimpleText"},{"code":"io.dropwizard.Configuration.getMetricsFactory()","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"This output can be helpful for fleshing out the configuration file with default options to make it easier to edit. For example, it's much easier to flip a boolean flag from ","type":"SimpleText"},{"code":"false","type":"InlinedCode"},{"text":" to ","type":"SimpleText"},{"code":"true","type":"InlinedCode"},{"text":" than to first figure out where in the configuration file it belongs and the exact spelling of its key.","type":"SimpleText"}]},{"lang":"java","snippet":"@JsonProperty(\"metrics\")\npublic MetricsFactory getMetricsFactory() {\n    return metrics;\n}","title":"io.dropwizard.Configuration","entry":"getMetricsFactory","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"ConfigLoggingBundle","type":"InlinedCode"},{"text":" also logs the \"default\" configuration at the ","type":"SimpleText"},{"code":"DEBUG","type":"InlinedCode"},{"text":" level. It does this by instantiating a new copy of the configuration class using the default no-arg constructor, serializing it to json, and logging it. The default configuration output can be useful for finding redundant configuration to remove.","type":"SimpleText"}]}]}],"lastModifiedTime":1600108188504,"tocItem":{"sectionTitle":"Configuration","pageTitle":"ConfigLoggingBundle","pageMeta":{},"dirName":"configuration","fileName":"ConfigLoggingBundle","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"ConfigLoggingBundle","id":"configloggingbundle"}]}},{"type":"Page","content":[{"title":"ObjectMapperBundle","id":"objectmapperbundle","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"ObjectMapperBundle","type":"InlinedCode"},{"text":" configures the Jackson ","type":"SimpleText"},{"code":"ObjectMapper","type":"InlinedCode"},{"text":" used by Dropwizard for serializing and deserializing all responses, as well as for logging by bundles such as ","type":"SimpleText"},{"code":"liftwizard-bundle-logging-config","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"ObjectMapperBundle","type":"InlinedCode"},{"text":" supports configuring pretty-printing on or off, and serialization inclusion to any value in Jackson's ","type":"SimpleText"},{"code":"JsonInclude.Include","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"ObjectMapperBundle","type":"InlinedCode"},{"text":" also turns on all json5 features, turns on ","type":"SimpleText"},{"code":"FAIL_ON_UNKNOWN_PROPERTIES","type":"InlinedCode"},{"text":", turns on ","type":"SimpleText"},{"code":"STRICT_DUPLICATE_DETECTION","type":"InlinedCode"},{"text":", and turns on serialization of dates and Strings.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To turn it on, add ","type":"SimpleText"},{"code":"ObjectMapperBundle","type":"InlinedCode"},{"text":" to the list of registered bundles.","type":"SimpleText"}]},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n    // JsonConfigurationFactoryFactory uses a separate ObjectMapper, and can be configured earlier\n    bootstrap.setConfigurationFactoryFactory(new JsonConfigurationFactoryFactory<>());\n    bootstrap.addBundle(new EnvironmentConfigBundle());\n \n    bootstrap.addBundle(new ObjectMapperBundle());\n \n    // ConfigLoggingBundle uses the ObjectMapper configured by ObjectMapperBundle\n    bootstrap.addBundle(new ConfigLoggingBundle());\n \n    // ...\n}\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"You'll be able to see that ","type":"SimpleText"},{"code":"ObjectMapperBundle","type":"InlinedCode"},{"text":" is working because the output of ","type":"SimpleText"},{"code":"ConfigLoggingBundle","type":"InlinedCode"},{"text":" will now be pretty-printed by default.","type":"SimpleText"}]}]}],"lastModifiedTime":1600108188504,"tocItem":{"sectionTitle":"Jackson","pageTitle":"ObjectMapperBundle","pageMeta":{},"dirName":"jackson","fileName":"ObjectMapperBundle","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"ObjectMapperBundle","id":"objectmapperbundle"}]}},{"type":"Page","content":[{"title":"Logging modules","id":"logging-modules","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The Liftwizard logging modules add context to slf4j logging through MDC and through \"structured logging\". There are several bundles and servlet filters to choose from. You can use all of them or cherry-pick the ones that are useful to you.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In order to see the logging in action, we'll need to configure a log format that includes mdc and markers.","type":"SimpleText"}]},{"level":3,"title":"test-example.json5","id":"test-examplejson5","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"src/test/resources/test-example.json5","type":"InlinedCode"}]},{"lang":"json5","snippet":"{\n  \"type\"             : \"console\",\n  \"timeZone\"         : \"system\",\n\"logFormat\"        : \"%highlight(%-5level) %cyan(%date{HH:mm:ss}) [%white(%thread)] %blue(%marker) {%magenta(%mdc)} %green(%logger): %message%n%red(%rootException)\",\n\"includeCallerData\": true\n}\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Next, lets turn on all the basic filters and see how they change what gets logged.","type":"SimpleText"}]},{"level":3,"title":"HelloWorldApplication.java","id":"helloworldapplicationjava","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"src/main/java/com/example/helloworld/HelloWorldApplication.java","type":"InlinedCode"}]},{"lang":"java","snippet":"@Override\npublic void run(HelloWorldConfiguration configuration, Environment environment) {\n    // ...\n    environment.getApplicationContext().addFilter(\n            StructuredArgumentLoggingFilter.class,\n            \"/*\",\n            EnumSet.of(DispatcherType.REQUEST));\n    environment.getApplicationContext().addFilter(\n            new FilterHolder(new DurationStructuredLoggingFilter(configuration.getClockFactory().createClock())),\n            \"/*\",\n            EnumSet.of(DispatcherType.REQUEST));\n \n    environment.jersey().register(CorrelationIdFilter.class);\n    environment.jersey().register(ResourceInfoLoggingFilter.class);\n    environment.jersey().register(StatusInfoStructuredLoggingFilter.class);\n    // ... register other stuff, including jersey resources\n}\n","lineNumber":"","type":"Snippet"},{"level":2,"title":"Logging output","id":"logging-output","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"With the logFormat and the filters in place, we can rerun ","type":"SimpleText"},{"code":"IntegrationTest","type":"InlinedCode"},{"text":" and see the new logs in action.","type":"SimpleText"}]},{"lang":"","snippet":"INFO  15:03:56 [dw-22] {liftwizard.time.startTime=2020-05-06T19:03:56.967412Z, liftwizard.response.http.statusEnum=OK, liftwizard.response.http.statusCode=200, liftwizard.response.http.statusFamily=SUCCESSFUL, liftwizard.response.http.statusPhrase=OK, liftwizard.response.http.entityType=com.example.helloworld.api.Saying, liftwizard.time.endTime=2020-05-06T19:03:56.984585Z, liftwizard.time.duration.pretty=0.017173s, liftwizard.time.duration.ms=17, liftwizard.time.duration.ns=17173000} {liftwizard.request.resourceMethodName=sayHello, liftwizard.request.parameter.query.name=Dr. IntegrationTest, liftwizard.request.resourceClassName=com.example.helloworld.resources.HelloWorldResource, liftwizard.request.httpPath=hello-world, liftwizard.request.correlationId=82681aab-1a69-4fc0-b425-a5cbcbf98411, liftwizard.request.httpMethod=GET, liftwizard.request.httpPathTemplate=/hello-world} com.liftwizard.servlet.logging.structured.argument.StructuredArgumentLoggingFilter: structured logging\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This can be hard to see in a single line but it includes:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.correlationId=82681aab-1a69-4fc0-b425-a5cbcbf98411","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.httpMethod=GET","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.httpPath=hello-world","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.httpPathTemplate=/hello-world","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.parameter.query.name=Dr. IntegrationTest","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.resourceClassName=com.example.helloworld.resources.HelloWorldResource","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.resourceMethodName=sayHello","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.response.http.entityType=com.example.helloworld.api.Saying","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.response.http.statusCode=200","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.response.http.statusEnum=OK","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.response.http.statusFamily=SUCCESSFUL","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.response.http.statusPhrase=OK","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.time.duration.ms=17","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.time.duration.ns=17173000","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.time.duration.pretty=0.017173s","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.time.endTime=2020-05-06T19:03:56.984585Z","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.time.startTime=2020-05-06T19:03:56.967412Z","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"Let's take a look at each filter individually.","type":"SimpleText"}]},{"level":2,"title":"StructuredArgumentLoggingFilter","id":"structuredargumentloggingfilter","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"StructuredArgumentLoggingFilter","type":"InlinedCode"},{"text":" is a pre-requisite for structured logging. For the most part, you can pick and choose which dependencies you want to include, but ","type":"SimpleText"},{"code":"liftwizard-servlet-logging-structured-argument","type":"InlinedCode"},{"text":" is usually required.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"StructuredArgumentLoggingFilter","type":"InlinedCode"},{"text":" is a servlet filter that puts a \"structured-logging\" ","type":"SimpleText"},{"code":"LinkedHashMap","type":"InlinedCode"},{"text":" into the ","type":"SimpleText"},{"code":"ServletRequest","type":"InlinedCode"},{"text":" at the beginning of each request. Next, all other structured logging filters put their context into the same map. Finally, ","type":"SimpleText"},{"code":"StructuredArgumentLoggingFilter","type":"InlinedCode"},{"text":" logs the text ","type":"SimpleText"},{"code":"\"structured logging\"","type":"InlinedCode"},{"text":" together with all context at the end of each servlet request.","type":"SimpleText"}]},{"level":2,"title":"CorrelationIdFilter","id":"correlationidfilter","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"CorrelationIdFilter","type":"InlinedCode"},{"text":" gets the correlation id from a request header, adds it to the ","type":"SimpleText"},{"code":"ContainerResponseContext","type":"InlinedCode"},{"text":", and adds it to MDC. If there is no correlation id, ","type":"SimpleText"},{"code":"CorrelationIdFilter","type":"InlinedCode"},{"text":" creates one first. The default header name and MDC key are both ","type":"SimpleText"},{"code":"\"liftwizard.request.correlationId\"","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"level":2,"title":"ResourceInfoLoggingFilter","id":"resourceinfologgingfilter","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"ResourceInfoLoggingFilter","type":"InlinedCode"},{"text":" gets information from the jax-rs ","type":"SimpleText"},{"code":"UriInfo","type":"InlinedCode"},{"text":" and adds it to MDC.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"This includes:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.httpPath","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.httpMethod","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.resourceClassName","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.resourceMethodName","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.httpPathTemplate","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"In addition, for every query and path parameter, it adds a key of the form:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.parameter.query.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.request.parameter.path.","type":"SimpleText"}]}]}]},{"level":2,"title":"StatusInfoStructuredLoggingFilter","id":"statusinfostructuredloggingfilter","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"StatusInfoStructuredLoggingFilter","type":"InlinedCode"},{"text":" gets information from the jax-rs ","type":"SimpleText"},{"code":"StatusType","type":"InlinedCode"},{"text":" and adds it to the structured argument map.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"This includes:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.response.http.statusEnum","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.response.http.statusCode","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.response.http.statusFamily","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.response.http.statusPhrase","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.response.http.entityType","type":"SimpleText"}]}]}]},{"level":2,"title":"DurationStructuredLoggingFilter","id":"durationstructuredloggingfilter","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"DurationStructuredLoggingFilter","type":"InlinedCode"},{"text":" is a servlet filter that adds request/response timing information to the structured argument map.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"This includes:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.time.endTime","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.time.duration.pretty","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.time.duration.ms","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.time.duration.ns","type":"SimpleText"}]}]}]},{"level":2,"title":"Sources of randomness","id":"sources-of-randomness","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Since the ","type":"SimpleText"},{"code":"CorrelationIdFilter","type":"InlinedCode"},{"text":" may need to generate ids if none are passed in, it needs a factory of UUIDs.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Since the ","type":"SimpleText"},{"code":"DurationStructuredLoggingFilter","type":"InlinedCode"},{"text":" generates timing information, it needs a clock.","type":"SimpleText"}]},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n    bootstrap.setConfigurationFactoryFactory(new JsonConfigurationFactoryFactory<>());\n    bootstrap.addBundle(new EnvironmentConfigBundle());\n \n    bootstrap.addBundle(new ClockBundle());\n    bootstrap.addBundle(new UUIDBundle());\n \n    // ...\n    });\n}\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"For more information on configuring sources of randomness, see the documentation for liftwizard-clock and liftwizard-uuid.","type":"SimpleText"}]},{"level":2,"title":"Logstash encoder","id":"logstash-encoder","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"liftwizard-config-logging-logstash-file","type":"InlinedCode"},{"text":" is a Dropwizard ","type":"SimpleText"},{"code":"AppenderFactory","type":"InlinedCode"},{"text":". It sets up a file appender that logs one json object per log statement. The json is formatted by ","type":"SimpleText"},{"url":"https://github.com/logstash/logstash-logback-encoder","isFile":false,"type":"Link","content":[{"text":"logstash-logback-encoder","type":"SimpleText"}]},{"text":" and is ready to be parsed by logstash.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's add the logstash-file appender to the list of configured appenders.","type":"SimpleText"}]},{"level":3,"title":"test-example.json5","id":"test-examplejson5","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"src/test/resources/test-example.json5","type":"InlinedCode"}]},{"lang":"json5","snippet":"  logging: {\n    level: \"INFO\",\n    appenders: [\n      {\n        \"type\"             : \"console\",\n        \"timeZone\"         : \"system\",\n        \"logFormat\"        : \"%highlight(%-5level) %cyan(%date{HH:mm:ss}) [%white(%thread)] %blue(%marker) {%magenta(%mdc)} %green(%logger): %message%n%red(%rootException)\",\n        \"includeCallerData\": true\n      },\n      {\n        \"type\"                      : \"logstash-file\",\n        \"currentLogFilename\"        : \"./logs/logstash.json\",\n        \"archivedLogFilenamePattern\": \"./logs/logstash-%d.json\",\n        \"includeCallerData\"         : true\n      }\n    ]\n  }\n","lineNumber":"","type":"Snippet"},{"level":3,"title":"logstash.json","id":"logstashjson","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"logs/logstash.json","type":"InlinedCode"},{"text":" snippet","type":"SimpleText"}]},{"lang":"json","snippet":"{\n  \"@timestamp\": \"2020-05-06T15:03:56.984-04:00\",\n  \"@version\": \"1\",\n  \"message\": \"structured logging\",\n  \"logger_name\": \"com.liftwizard.servlet.logging.structured.argument.StructuredArgumentLoggingFilter\",\n  \"thread_name\": \"dw-22\",\n  \"level\": \"INFO\",\n  \"level_value\": 20000,\n  \"liftwizard.request.resourceMethodName\": \"sayHello\",\n  \"liftwizard.request.parameter.query.name\": \"Dr. IntegrationTest\",\n  \"liftwizard.request.resourceClassName\": \"com.example.helloworld.resources.HelloWorldResource\",\n  \"liftwizard.request.httpPath\": \"hello-world\",\n  \"liftwizard.request.correlationId\": \"82681aab-1a69-4fc0-b425-a5cbcbf98411\",\n  \"liftwizard.request.httpMethod\": \"GET\",\n  \"liftwizard.request.httpPathTemplate\": \"/hello-world\",\n  \"liftwizard.time.startTime\": \"2020-05-06T19:03:56.967412Z\",\n  \"liftwizard.response.http.statusEnum\": \"OK\",\n  \"liftwizard.response.http.statusCode\": 200,\n  \"liftwizard.response.http.statusFamily\": \"SUCCESSFUL\",\n  \"liftwizard.response.http.statusPhrase\": \"OK\",\n  \"liftwizard.response.http.entityType\": \"com.example.helloworld.api.Saying\",\n  \"liftwizard.time.endTime\": \"2020-05-06T19:03:56.984585Z\",\n  \"liftwizard.time.duration.pretty\": \"0.017173s\",\n  \"liftwizard.time.duration.ms\": 17,\n  \"liftwizard.time.duration.ns\": 17173000,\n  \"caller_class_name\": \"com.liftwizard.servlet.logging.structured.argument.StructuredArgumentLoggingFilter\",\n  \"caller_method_name\": \"log\",\n  \"caller_file_name\": \"StructuredArgumentLoggingFilter.java\",\n  \"caller_line_number\": 86\n}\n","lineNumber":"","type":"Snippet"}]}],"lastModifiedTime":1600108188504,"tocItem":{"sectionTitle":"Logging","pageTitle":"Logging Modules","pageMeta":{},"dirName":"logging","fileName":"logging-modules","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Logging modules","id":"logging-modules"}]}},{"type":"Page","content":[{"title":"JerseyHttpLoggingBundle","id":"jerseyhttploggingbundle","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"JerseyHttpLoggingBundle","type":"InlinedCode"},{"text":" logs all requests and responses to slf4j. The ","type":"SimpleText"},{"code":"verbosity","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"maxEntitySize","type":"InlinedCode"},{"text":" are configurable.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To turn it on, add ","type":"SimpleText"},{"code":"JerseyHttpLoggingBundle","type":"InlinedCode"},{"text":" to the list of registered bundles.","type":"SimpleText"}]},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n    bootstrap.setConfigurationFactoryFactory(new JsonConfigurationFactoryFactory<>());\n    bootstrap.addBundle(new EnvironmentConfigBundle());\n \n    bootstrap.addBundle(new ObjectMapperBundle());\n    bootstrap.addBundle(new ConfigLoggingBundle());\n \n    bootstrap.addBundle(new JerseyHttpLoggingBundle());\n \n    // ...\n}\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"If ","type":"SimpleText"},{"code":"ObjectMapperBundle","type":"InlinedCode"},{"text":" is also registered, the json bodies will be pretty-printed.","type":"SimpleText"}]},{"lang":"","snippet":"INFO  21:01:18 [dw-26 - POST /people]  {} com.liftwizard.dropwizard.bundle.httplogging.JerseyHttpLoggingBundle: 1 * Server has received a request on thread dw-26 - POST /people\n1 > POST http://localhost:59980/people\n1 > Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\n1 > Connection: keep-alive\n1 > Content-Length: 83\n1 > Content-Type: application/json\n1 > Host: localhost:59980\n1 > User-Agent: Jersey/2.25.1 (HttpUrlConnection 11.0.7)\n{\n  \"id\" : 0,\n  \"fullName\" : \"Dr. IntegrationTest\",\n  \"jobTitle\" : \"Chief Wizard\"\n}\n \nINFO  21:01:18 [dw-26 - POST /people]  {liftwizard.request.resourceMethodName=createPerson, liftwizard.request.resourceClassName=com.example.helloworld.resources.PeopleResource, liftwizard.request.httpPath=people, liftwizard.request.correlationId=4bb909d0-4c29-3f81-957f-aab6d7f73c9f, liftwizard.request.httpMethod=POST, liftwizard.request.httpPathTemplate=/people} com.liftwizard.dropwizard.bundle.httplogging.JerseyHttpLoggingBundle: 1 * Server responded with a response on thread dw-26 - POST /people\n1 < 200\n1 < Content-Type: application/json\n1 < liftwizard.request.correlationId: 4bb909d0-4c29-3f81-957f-aab6d7f73c9f\n{\n  \"id\" : 1,\n  \"fullName\" : \"Dr. IntegrationTest\",\n  \"jobTitle\" : \"Chief Wizard\"\n}\n","lineNumber":"","type":"Snippet"}]}],"lastModifiedTime":1600108188504,"tocItem":{"sectionTitle":"Logging","pageTitle":"JerseyHttpLoggingBundle","pageMeta":{},"dirName":"logging","fileName":"JerseyHttpLoggingBundle","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"JerseyHttpLoggingBundle","id":"jerseyhttploggingbundle"}]}},{"type":"Page","content":null,"lastModifiedTime":1600108188504,"tocItem":{"sectionTitle":"Utility","pageTitle":"Liftwizard Config Logging Filter Requesturl","pageMeta":{},"dirName":"utility","fileName":"liftwizard-config-logging-filter-requesturl","viewOnRelativePath":null,"pageSectionIdTitles":[]}}]